#+html: <p align="center"> <img width="350" height="350" src="https://raw.githubusercontent.com/fabrik42/traffic-light-client-elixir/master/assets/doc/real_traffic_light_square.jpg"></p>
* Traffic Light Client for the Raspberry PI
This is an *Elixir* client that corresponds to our [[https://github.com/fabrik42/traffic-light-server-elixir][Traffic Light Server]] and controls the lights of a modded traffic light, using three GPIO pins of the Raspberry PI.

In order to make the deployment and service management on the device as easy as possible I decided to try out the [[https://nerves-project.org/][Nerves Project]].

The real world traffic light consists of the lights itself (in the commonly known casing) that are controlled by a custom made shield for the Raspberry PI.

#+html: <p align="center"> <img width="350" height="350" src="https://raw.githubusercontent.com/fabrik42/traffic-light-client-elixir/master/assets/doc/shield.jpeg"></p>

This project replaces an old [[https://github.com/fabrik42/traffic-light-client-raspberry][Ruby version of the client]] that was running as a service on a Raspian installation.
** Deployment
Note that there are some environment variables required when building a release.

I set them automatically with [[https://direnv.net/][direnv]] and a ~.env~ file. See the ~.env_example~ file for what is needed.
*** Initial Deployment (or Offline Deployment)
#+begin_src sh
mix deps.get
mix firmware
mix firmware.burn
#+end_src
*** Follow up deployments
#+begin_src sh
mix firmware
./upload.sh
#+end_src
** Debugging and introspection
*** SSH into running client
Note that the client has to be in the same network ;)

#+begin_src sh
ssh nerves.local
#+end_src
*** Check outside connections from iex
#+begin_src elixir
tping 'google.com'
#+end_src
*** Get network information
#+begin_src elixir
Nerves.Network.status("wlan0")
#+end_src
*** Looking into the GenServer that updates the traffic light
First, you have to enable debugging of the genserver.

#+begin_src elixir
TrafficLightClient.Updater.enable_debug
#+end_src

Then you can use the following statements to introspect the process and look at the state.

#+begin_src elixir
:sys.get_status(UpdaterLink)
:sys.statistics(UpdaterLink, :get)
:sys.get_state(UpdaterLink)
#+end_src
** More Information
- [[https://hexdocs.pm/nerves/getting-started.html#connecting-to-your-nerves-target][Nerves getting started]]
- [[https://hexdocs.pm/nerves_init_gadget/readme.html#configuration][Tutorial nerves_init_gadget]]
- [[https://hexdocs.pm/nerves_network/readme.html#installation-and-setup][Network wlan setup]]
- [[https://github.com/nerves-project/nerves_examples/blob/master/hello_gpio/lib/hello_gpio.ex][Nerves GPIO example]]
- [[https://github.com/elixir-circuits/circuits_gpio][Circuits GPIO lib]]

üö• ‚ù§ üö•
